// Generated by CoffeeScript 1.7.1
(function() {
  var button, getElements, running, start, stopFunc, stream, video;

  if (window.compliments == null) {
    window.compliments = {};
  }

  running = false;

  button = null;

  video = null;

  stopFunc = null;

  stream = null;

  window.compliments.startStop = function() {
    getElements();
    if (running) {
      if (typeof stopFunc === "function") {
        stopFunc();
      }
      stopFunc = null;
      button.innerHTML = 'Start';
      return running = false;
    } else {
      button.innerHTML = 'Waiting...';
      button.disabled = true;
      return start(function(err) {
        if (err != null) {
          button.innerHTML = 'Start';
        } else {
          button.innerHTML = 'Stop';
          running = true;
        }
        return delete button.disabled;
      });
    }
  };

  start = function(cb) {
    return window.compliments.getStream(function(err, st) {
      if (err != null) {
        return typeof cb === "function" ? cb(err) : void 0;
      }
      stream = st;
      return window.compliments.playStream(video, stream, function(err) {
        var f, sf;
        if (err != null) {
          return typeof cb === "function" ? cb(err) : void 0;
        }
        f = window.compliments.handleFrame;
        sf = window.compliments.getFrames(video, f);
        stopFunc = function() {
          sf();
          if (typeof stream.stop === "function") {
            stream.stop();
          }
          return video.pause();
        };
        return cb(null);
      });
    });
  };

  getElements = function() {
    if (button == null) {
      button = document.getElementById('startStop');
    }
    if (video == null) {
      return video = document.getElementById('video');
    }
  };

}).call(this);
// Generated by CoffeeScript 1.7.1
(function() {
  if (window.compliments == null) {
    window.compliments = {};
  }

  window.compliments.handleFrame = function(frame) {};

}).call(this);
// Generated by CoffeeScript 1.7.1
(function() {
  if (window.compliments == null) {
    window.compliments = {};
  }

  window.compliments.getStream = function(cb) {
    var gum, key, keys, _i, _len;
    keys = ['getUserMedia', 'webkitGetUserMedia', 'mozGetUserMedia', 'msGetUserMedia'];
    gum = null;
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      if ((gum = navigator[key]) != null) {
        break;
      }
    }
    if (gum == null) {
      setTimeout((function() {
        return cb('Camera unavailable', null);
      }), 10);
      return;
    }
    gum.call(navigator, {
      video: true,
      audio: false
    }, function(stream) {
      return cb(null, stream);
    }, function(error) {
      if (error != null) {
        return cb(error, null);
      } else {
        return cb('Unknown error', null);
      }
    });
  };

  window.compliments.playStream = function(v, stream, cb) {
    var url;
    url = window.URL;
    if (url != null) {
      v.src = url.createObjectURL(stream);
    } else {
      v.src = stream;
    }
    v.play();
    v.addEventListener('canplay', function() {
      if (typeof cb === "function") {
        cb(null);
      }
      return cb = null;
    });
    v.addEventListener('error', function(error) {
      if (error != null) {
        if (typeof cb === "function") {
          cb(error);
        }
      } else {
        if (typeof cb === "function") {
          cb('Unknown error');
        }
      }
      return cb = null;
    });
  };

  window.compliments.getFrames = function(v, cb) {
    var canvas, ctx, func, height, intervalId, width, _ref;
    canvas = document.createElement('canvas');
    width = v.videoWidth, height = v.videoHeight;
    _ref = [width, height], canvas.width = _ref[0], canvas.height = _ref[1];
    ctx = canvas.getContext('2d');
    intervalId = null;
    func = function() {
      if (v.paused || v.ended) {
        if (intervalId != null) {
          clearInterval(intervalId);
          intervalId = null;
        }
        return;
      }
      context.clearRect(0, 0, width, height);
      context.drawImage(v, 0, 0, width, height);
      return cb(context.getImageData(0, 0, w, h).data);
    };
    intervalId = setInterval(func, 100);
    return function() {
      if (intervalId != null) {
        clearInterval(intervalId);
        return intervalId = null;
      }
    };
  };

}).call(this);
