// Generated by CoffeeScript 1.7.1
(function() {
  if (typeof compliments === "undefined" || compliments === null) {
    window.compliments = {};
  }

  window.compliments.playCompliment = function(endCb) {
    var a;
    a = new Audio('test.wav');
    a.play();
    return setTimeout(endCb, 2000);
  };

}).call(this);
// Generated by CoffeeScript 1.7.1
(function() {
  var button, getElements, running, start, stopFunc, stream, video;

  if (window.compliments == null) {
    window.compliments = {};
  }

  running = false;

  button = null;

  video = null;

  stopFunc = null;

  stream = null;

  window.compliments.startStop = function() {
    getElements();
    if (running) {
      if (typeof stopFunc === "function") {
        stopFunc();
      }
      stopFunc = null;
      button.innerHTML = 'Start';
      button.disabled = false;
      return running = false;
    } else {
      button.innerHTML = 'Waiting...';
      button.disabled = true;
      return start(function(err) {
        if (err != null) {
          button.innerHTML = 'Start';
        } else {
          button.innerHTML = 'Stop';
          running = true;
        }
        return button.disabled = false;
      });
    }
  };

  start = function(cb) {
    return window.compliments.getStream(function(err, st) {
      if (err != null) {
        return typeof cb === "function" ? cb(err) : void 0;
      }
      stream = st;
      return window.compliments.playStream(video, stream, function(err) {
        var f, sf;
        if (err != null) {
          return typeof cb === "function" ? cb(err) : void 0;
        }
        f = window.compliments.handleFrame;
        sf = window.compliments.getFrames(video, f);
        stopFunc = function() {
          sf();
          if (typeof stream.stop === "function") {
            stream.stop();
          }
          return video.pause();
        };
        return cb(null);
      });
    });
  };

  getElements = function() {
    if (button == null) {
      button = document.getElementById('startStop');
    }
    if (video == null) {
      return video = document.getElementById('video');
    }
  };

}).call(this);
// Generated by CoffeeScript 1.7.1
(function() {
  var averageRegion, computeAverageData, handleChange, isPlaying, lastData;

  if (window.compliments == null) {
    window.compliments = {};
  }

  lastData = null;

  isPlaying = false;

  window.compliments.handleFrame = function(frame, width, height) {
    var data, difference, i, percentDiff, x, _i, _len;
    data = computeAverageData(frame, width, height);
    if (lastData == null) {
      lastData = data;
      return;
    }
    difference = 0;
    for (i = _i = 0, _len = lastData.length; _i < _len; i = ++_i) {
      x = lastData[i];
      difference += Math.abs(x - data[i]);
    }
    percentDiff = difference / data.length;
    if (percentDiff > 0.01) {
      handleChange();
    }
    lastData = data;
  };

  computeAverageData = function(frame, width, height) {
    var a, averages, n, reg, x, y, _i, _len;
    reg = Math.ceil(width / 50);
    averages = [];
    y = 0;
    while (y < height) {
      x = 0;
      while (x < width) {
        a = averageRegion(frame, x, y, width, height, reg);
        for (_i = 0, _len = a.length; _i < _len; _i++) {
          n = a[_i];
          averages.push(n);
        }
        x += reg;
      }
      y += reg;
    }
    return averages;
  };

  averageRegion = function(frame, x, y, width, height, regionSize) {
    var b, g, i, j, r, sampleCount, useX, useY, _i, _j, _ref;
    sampleCount = 0;
    _ref = [0, 0, 0], r = _ref[0], g = _ref[1], b = _ref[2];
    for (i = _i = 0; 0 <= regionSize ? _i <= regionSize : _i >= regionSize; i = 0 <= regionSize ? ++_i : --_i) {
      useX = x + i;
      if (useX >= width) {
        break;
      }
      for (j = _j = 0; 0 <= regionSize ? _j <= regionSize : _j >= regionSize; j = 0 <= regionSize ? ++_j : --_j) {
        useY = y + j;
        if (useY >= height) {
          break;
        }
        r += frame[useX * 3 + useY * 3 * width];
        g += frame[useX * 3 + useY * 3 * width + 1];
        b += frame[useX * 3 + useY * 3 * width + 2];
        ++sampleCount;
      }
    }
    sampleCount *= 256;
    r /= sampleCount;
    g /= sampleCount;
    b /= sampleCount;
    return [r, g, b];
  };

  handleChange = function() {
    if (isPlaying) {
      return;
    }
    isPlaying = true;
    return window.compliments.playCompliment(function() {
      return isPlaying = false;
    });
  };

}).call(this);
// Generated by CoffeeScript 1.7.1
(function() {
  if (window.compliments == null) {
    window.compliments = {};
  }

  window.compliments.getStream = function(cb) {
    var gum, key, keys, _i, _len;
    keys = ['getUserMedia', 'webkitGetUserMedia', 'mozGetUserMedia', 'msGetUserMedia'];
    gum = null;
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      if ((gum = navigator[key]) != null) {
        break;
      }
    }
    if (gum == null) {
      setTimeout((function() {
        return cb('Camera unavailable', null);
      }), 10);
      return;
    }
    gum.call(navigator, {
      video: true,
      audio: false
    }, function(stream) {
      return cb(null, stream);
    }, function(error) {
      if (error != null) {
        return cb(error, null);
      } else {
        return cb('Unknown error', null);
      }
    });
  };

  window.compliments.playStream = function(v, stream, cb) {
    var url;
    url = window.URL;
    if (url != null) {
      v.src = url.createObjectURL(stream);
    } else {
      v.src = stream;
    }
    v.play();
    v.addEventListener('canplay', function() {
      if (typeof cb === "function") {
        cb(null);
      }
      return cb = null;
    });
    v.addEventListener('error', function(error) {
      if (error != null) {
        if (typeof cb === "function") {
          cb(error);
        }
      } else {
        if (typeof cb === "function") {
          cb('Unknown error');
        }
      }
      return cb = null;
    });
  };

  window.compliments.getFrames = function(v, cb) {
    var canvas, ctx, func, height, intervalId, width, _ref;
    canvas = document.createElement('canvas');
    width = v.videoWidth, height = v.videoHeight;
    _ref = [width, height], canvas.width = _ref[0], canvas.height = _ref[1];
    ctx = canvas.getContext('2d');
    intervalId = null;
    func = function() {
      if (v.paused || v.ended) {
        if (intervalId != null) {
          clearInterval(intervalId);
          intervalId = null;
        }
        return;
      }
      ctx.clearRect(0, 0, width, height);
      ctx.drawImage(v, 0, 0, width, height);
      return cb(ctx.getImageData(0, 0, width, height).data, width, height);
    };
    intervalId = setInterval(func, 100);
    return function() {
      if (intervalId != null) {
        clearInterval(intervalId);
        return intervalId = null;
      }
    };
  };

}).call(this);
